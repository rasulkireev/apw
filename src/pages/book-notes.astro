---
import BaseLayout from '../layouts/BaseLayout.astro';
import { getCollection } from 'astro:content';
import { Image } from 'astro:assets';

const pageTitle = "Book Reviews by Rasul Kireev";
const allBooks = await getCollection('books');

// Get the selected tags, category, and sort from URL params
const selectedTags = Astro.url.searchParams.get('tags')?.split(',').filter(Boolean) || [];
const selectedCategory = Astro.url.searchParams.get('category');
const selectedSort = Astro.url.searchParams.get('sort') || 'rating-desc';

// Sort books based on selected sort option
function sortBooks(books, sortOption) {
  return [...books].sort((a, b) => {
    switch (sortOption) {
      case 'rating-asc':
        return a.data.rating.valueOf() - b.data.rating.valueOf();
      case 'rating-desc':
        return b.data.rating.valueOf() - a.data.rating.valueOf();
      case 'date-asc':
        return new Date(a.data.dateRead).getTime() - new Date(b.data.dateRead).getTime();
      case 'date-desc':
        return new Date(b.data.dateRead).getTime() - new Date(a.data.dateRead).getTime();
      default:
        return b.data.rating.valueOf() - a.data.rating.valueOf();
    }
  });
}

const sortedBooks = sortBooks(allBooks, selectedSort);

// Get unique tags from all books
const allTags = [...new Set(allBooks.flatMap(book => book.data.tags || []))].sort();

// Get unique categories from all books
const allCategories = [...new Set(allBooks.map(book => book.data.category).filter(Boolean))].sort();

// Filter books if tags or category are selected
const filteredBooks = sortedBooks.filter(book => {
  const matchesTags = selectedTags.length === 0 ||
    book.data.tags?.some(tag => selectedTags.includes(tag));
  const matchesCategory = !selectedCategory ||
    book.data.category === selectedCategory;
  return matchesTags && matchesCategory;
});
---

<BaseLayout pageTitle={pageTitle}>
  <div class="mb-4 space-y-4">
    <div class="flex justify-between items-center">
      <div class="flex gap-2">
        <button
          id="toggleTags"
          class="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50"
        >
          Filter by tags
        </button>

        <select
          id="categoryFilter"
          class="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50"
        >
          <option value="">All Categories</option>
          {allCategories.map(category => (
            <option
              value={category}
              selected={category === selectedCategory}
            >
              {category}
            </option>
          ))}
        </select>
      </div>

      <div class="flex gap-2">
        <select
          id="sortFilter"
          class="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50"
        >
          <option value="rating-desc" selected={selectedSort === 'rating-desc'}>Rating (High to Low)</option>
          <option value="rating-asc" selected={selectedSort === 'rating-asc'}>Rating (Low to High)</option>
          <option value="date-desc" selected={selectedSort === 'date-desc'}>Date Read (Newest First)</option>
          <option value="date-asc" selected={selectedSort === 'date-asc'}>Date Read (Oldest First)</option>
        </select>
      </div>
    </div>

    <div id="tagContainer" class="hidden mt-4 space-y-2">
      <div class="flex flex-wrap gap-2">
        {allTags.map(tag => (
          <button
            class="px-3 py-1 text-sm text-gray-700 bg-white rounded-full hover:bg-gray-50 tag-pill"
            data-tag={tag}
          >
            {tag}
          </button>
        ))}
      </div>
    </div>
  </div>

  {filteredBooks.map(p => (
    <div class="mb-1 book-item" data-tags={p.data.tags?.join(',')} data-category={p.data.category} data-date-read={p.data.dateRead}>
      <a
        href={"/" + p.slug}
        class="flex flex-col items-center p-3 space-x-0 space-y-2 text-xl text-gray-900 border-0 rounded-lg md:space-x-4 md:flex-row hover:bg-gray-200"
      >
        <Image
          src={p.data.cover}
          alt={p.data.title}
          class="self-start inline w-24 h-auto align-middle md:pt-3"
        />

        <div class="md:flex-col md:space-y-2 md:flex">
          <div class="flex flex-col space-y-2">
            <p class="text-xl font-semibold md:text-2xl">{ p.data.title } by { p.data.author }</p>
            <p class="text-sm text-gray-600">Rating: <span class="rating-value">{ p.data.rating }</span>/10</p>
            <p class="text-sm text-gray-600">Date Read: {p.data.dateRead.toLocaleDateString('en-us', { year: 'numeric', month: 'long', day: 'numeric' })}</p>
            <p class="m-0 text-base text-gray-800">
              { p.data.description }
            </p>
          </div>
        </div>
      </a>
    </div>
  ))}
</BaseLayout>

<script>
  const toggleButton = document.getElementById('toggleTags');
  const tagContainer = document.getElementById('tagContainer');
  const tagPills = document.querySelectorAll('.tag-pill');
  const bookItems = document.querySelectorAll('.book-item');
  const categoryFilter = document.getElementById('categoryFilter');
  const sortFilter = document.getElementById('sortFilter');

  // Toggle tag container visibility
  toggleButton?.addEventListener('click', () => {
    tagContainer?.classList.toggle('hidden');
  });

  // Handle category selection
  categoryFilter?.addEventListener('change', (e) => {
    const select = e.target as HTMLSelectElement;
    const selectedCategory = select.value;

    // Update URL without page reload
    const newUrl = new URL(window.location.href);
    if (selectedCategory) {
      newUrl.searchParams.set('category', selectedCategory);
    } else {
      newUrl.searchParams.delete('category');
    }
    window.history.pushState({}, '', newUrl);

    filterAndSortBooks();
  });

  // Handle sort selection
  sortFilter?.addEventListener('change', (e) => {
    const select = e.target as HTMLSelectElement;
    const selectedSort = select.value;

    // Update URL without page reload
    const newUrl = new URL(window.location.href);
    newUrl.searchParams.set('sort', selectedSort);
    window.history.pushState({}, '', newUrl);

    filterAndSortBooks();
  });

  // Handle tag selection
  tagPills.forEach(pill => {
    pill.addEventListener('click', () => {
      pill.classList.toggle('selected');
      pill.classList.toggle('bg-gray-100');
      pill.classList.toggle('border');
      pill.classList.toggle('border-blue-500');

      // Get all selected tags
      const selectedTags = Array.from(document.querySelectorAll('.tag-pill.selected'))
        .map(el => el.getAttribute('data-tag'))
        .filter(Boolean);

      // Update URL without page reload
      const newUrl = new URL(window.location.href);
      if (selectedTags.length > 0) {
        newUrl.searchParams.set('tags', selectedTags.join(','));
      } else {
        newUrl.searchParams.delete('tags');
      }
      window.history.pushState({}, '', newUrl);

      filterAndSortBooks();
    });

    // Set initial selected state based on URL params
    const currentTags = new URLSearchParams(window.location.search).get('tags')?.split(',').filter(Boolean) || [];
    if (currentTags.includes(pill.getAttribute('data-tag'))) {
      pill.classList.add('selected', 'bg-gray-100', 'border', 'border-blue-500');
    }
  });

  function sortBooksClient(books, sortOption) {
    return Array.from(books).sort((a, b) => {
      const aRating = parseInt(a.querySelector('.rating-value')?.textContent || '0');
      const bRating = parseInt(b.querySelector('.rating-value')?.textContent || '0');
      const aDate = new Date(a.getAttribute('data-date-read') || '');
      const bDate = new Date(b.getAttribute('data-date-read') || '');

      switch (sortOption) {
        case 'rating-asc':
          return aRating - bRating;
        case 'rating-desc':
          return bRating - aRating;
        case 'date-asc':
          return aDate.getTime() - bDate.getTime();
        case 'date-desc':
          return bDate.getTime() - aDate.getTime();
        default:
          return bRating - aRating;
      }
    });
  }

  function filterAndSortBooks() {
    const selectedTags = Array.from(document.querySelectorAll('.tag-pill.selected'))
      .map(el => el.getAttribute('data-tag'))
      .filter(Boolean);
    const selectedCategory = (categoryFilter as HTMLSelectElement).value;
    const selectedSort = (sortFilter as HTMLSelectElement).value;

    // First filter books
    const visibleBooks = [];
    const hiddenBooks = [];

    bookItems.forEach(book => {
      const bookTags = book.getAttribute('data-tags')?.split(',').filter(Boolean) || [];
      const bookCategory = book.getAttribute('data-category');

      const matchesTags = selectedTags.length === 0 ||
        selectedTags.some(tag => bookTags.includes(tag));
      const matchesCategory = !selectedCategory ||
        bookCategory === selectedCategory;

      if (matchesTags && matchesCategory) {
        visibleBooks.push(book);
        book.style.display = '';
      } else {
        hiddenBooks.push(book);
        book.style.display = 'none';
      }
    });

    // Then sort visible books
    const sortedBooks = sortBooksClient(visibleBooks, selectedSort);

    // Get the parent container
    const container = bookItems[0]?.parentNode;
    if (container) {
      // Remove all books from DOM
      bookItems.forEach(book => book.remove());

      // Add sorted visible books back
      sortedBooks.forEach(book => container.appendChild(book));

      // Add hidden books at the end (they won't be visible anyway)
      hiddenBooks.forEach(book => container.appendChild(book));
    }
  }

  // Initial filter and sort on page load
  filterAndSortBooks();
</script>
