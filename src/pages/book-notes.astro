---
import BaseLayout from '../layouts/BaseLayout.astro';
import { getCollection } from 'astro:content';
import { Image } from 'astro:assets';

const pageTitle = "Book Reviews by Rasul Kireev";
const allBooks = await getCollection('books');

// Sort books by rating
allBooks.sort((a, b) => b.data.rating.valueOf() - a.data.rating.valueOf());

// Get unique tags from all books
const allTags = [...new Set(allBooks.flatMap(book => book.data.tags || []))].sort();

// Get unique categories from all books
const allCategories = [...new Set(allBooks.map(book => book.data.category).filter(Boolean))].sort();

// Get the selected tags and category from URL params
const selectedTags = Astro.url.searchParams.get('tags')?.split(',').filter(Boolean) || [];
const selectedCategory = Astro.url.searchParams.get('category');

// Filter books if tags or category are selected
const filteredBooks = allBooks.filter(book => {
  const matchesTags = selectedTags.length === 0 ||
    book.data.tags?.some(tag => selectedTags.includes(tag));
  const matchesCategory = !selectedCategory ||
    book.data.category === selectedCategory;
  return matchesTags && matchesCategory;
});
---

<BaseLayout pageTitle={pageTitle}>
  <div class="mb-4 space-y-4">
    <div class="flex gap-2">
      <button
        id="toggleTags"
        class="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50"
      >
        Filter by tags
      </button>

      <select
        id="categoryFilter"
        class="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50"
      >
        <option value="">All Categories</option>
        {allCategories.map(category => (
          <option
            value={category}
            selected={category === selectedCategory}
          >
            {category}
          </option>
        ))}
      </select>
    </div>

    <div id="tagContainer" class="hidden mt-4 space-y-2">
      <div class="flex flex-wrap gap-2">
        {allTags.map(tag => (
          <button
            class="px-3 py-1 text-sm text-gray-700 bg-white rounded-full hover:bg-gray-50 tag-pill"
            data-tag={tag}
          >
            {tag}
          </button>
        ))}
      </div>
    </div>
  </div>

  {filteredBooks.map(p => (
    <div class="mb-1 book-item" data-tags={p.data.tags?.join(',')} data-category={p.data.category}>
      <a
        href={"/" + p.slug}
        class="flex flex-col items-center p-3 space-x-0 space-y-2 text-xl text-gray-900 border-0 rounded-lg md:space-x-4 md:flex-row hover:bg-gray-200"
      >
        <Image
          src={p.data.cover}
          alt={p.data.title}
          class="self-start inline w-24 h-auto align-middle md:pt-3"
        />

        <div class="md:flex-col md:space-y-2 md:flex">
          <div class="flex flex-col space-y-2">
            <p class="text-xl font-semibold md:text-2xl">{ p.data.title } by { p.data.author }</p>
            <p class="text-sm text-gray-600">Rating: { p.data.rating }/10</p>
            <p class="text-sm text-gray-600">Date Read: {p.data.dateRead.toLocaleDateString('en-us', { year: 'numeric', month: 'long', day: 'numeric' })}</p>
            <p class="m-0 text-base text-gray-800">
              { p.data.description }
            </p>
          </div>
        </div>
      </a>
    </div>
  ))}
</BaseLayout>

<script>
  const toggleButton = document.getElementById('toggleTags');
  const tagContainer = document.getElementById('tagContainer');
  const tagPills = document.querySelectorAll('.tag-pill');
  const bookItems = document.querySelectorAll('.book-item');
  const categoryFilter = document.getElementById('categoryFilter');

  // Toggle tag container visibility
  toggleButton?.addEventListener('click', () => {
    tagContainer?.classList.toggle('hidden');
  });

  // Handle category selection
  categoryFilter?.addEventListener('change', (e) => {
    const select = e.target as HTMLSelectElement;
    const selectedCategory = select.value;

    // Update URL without page reload
    const newUrl = new URL(window.location.href);
    if (selectedCategory) {
      newUrl.searchParams.set('category', selectedCategory);
    } else {
      newUrl.searchParams.delete('category');
    }
    window.history.pushState({}, '', newUrl);

    filterBooks();
  });

  // Handle tag selection
  tagPills.forEach(pill => {
    pill.addEventListener('click', () => {
      pill.classList.toggle('selected');
      pill.classList.toggle('bg-gray-100');
      pill.classList.toggle('border');
      pill.classList.toggle('border-blue-500');

      // Get all selected tags
      const selectedTags = Array.from(document.querySelectorAll('.tag-pill.selected'))
        .map(el => el.getAttribute('data-tag'))
        .filter(Boolean);

      // Update URL without page reload
      const newUrl = new URL(window.location.href);
      if (selectedTags.length > 0) {
        newUrl.searchParams.set('tags', selectedTags.join(','));
      } else {
        newUrl.searchParams.delete('tags');
      }
      window.history.pushState({}, '', newUrl);

      filterBooks();
    });

    // Set initial selected state based on URL params
    const currentTags = new URLSearchParams(window.location.search).get('tags')?.split(',').filter(Boolean) || [];
    if (currentTags.includes(pill.getAttribute('data-tag'))) {
      pill.classList.add('selected', 'bg-gray-100', 'border', 'border-blue-500');
    }
  });

  function filterBooks() {
    const selectedTags = Array.from(document.querySelectorAll('.tag-pill.selected'))
      .map(el => el.getAttribute('data-tag'))
      .filter(Boolean);
    const selectedCategory = (categoryFilter as HTMLSelectElement).value;

    bookItems.forEach(book => {
      const bookTags = book.getAttribute('data-tags')?.split(',').filter(Boolean) || [];
      const bookCategory = book.getAttribute('data-category');

      const matchesTags = selectedTags.length === 0 ||
        selectedTags.some(tag => bookTags.includes(tag));
      const matchesCategory = !selectedCategory ||
        bookCategory === selectedCategory;

      book.style.display = (matchesTags && matchesCategory) ? '' : 'none';
    });
  }

  // Initial filter on page load
  filterBooks();
</script>
