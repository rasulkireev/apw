---
import BaseLayout from '../../layouts/BaseLayout.astro';
import { getCollection } from 'astro:content';
import { Image } from 'astro:assets';

// This function is required for dynamic routes in static site generation
export async function getStaticPaths() {
  // Get all collections that might have tags
  const allArticles = await getCollection('articles');
  const allTutorials = await getCollection('tutorials');
  const allBooks = await getCollection('books');
  const allPrompts = await getCollection('prompts');

  // Combine all content
  const allContent = [...allArticles, ...allTutorials, ...allBooks, ...allPrompts];

  // Extract all unique tags
  const allTags = [...new Set(
    allContent.flatMap(item => item.data.tags || [])
  )];

  // Create a path for each tag
  return allTags.map(tag => ({
    params: { tag },
    props: { tag }
  }));
}

// Get the tag from params or props
const { tag } = Astro.params;

if (!tag) {
  return Astro.redirect('/tags');
}

// Page title
const pageTitle = `Content tagged with "${tag}"`;

// Get all collections that might have tags
const allArticles = await getCollection('articles');
const allTutorials = await getCollection('tutorials');
const allBooks = await getCollection('books');
const allPrompts = await getCollection('prompts');

// Function to filter content by tag
function filterContentByTag(collection, tagName) {
  return collection.filter(item =>
    item.data.tags && item.data.tags.includes(tagName)
  );
}

// Get content with the current tag
const articlesWithTag = filterContentByTag(allArticles, tag);
const tutorialsWithTag = filterContentByTag(allTutorials, tag);
const booksWithTag = filterContentByTag(allBooks, tag);
const promptsWithTag = filterContentByTag(allPrompts, tag);

// Group content by type
const contentByType = [
  {
    type: 'Articles',
    items: articlesWithTag,
    path: 'articles',
    emptyMessage: 'No articles with this tag'
  },
  {
    type: 'Tutorials',
    items: tutorialsWithTag,
    path: 'tutorials',
    emptyMessage: 'No tutorials with this tag'
  },
  {
    type: 'Book Notes',
    items: booksWithTag,
    path: 'book-notes',
    emptyMessage: 'No book notes with this tag'
  },
  {
    type: 'Prompts',
    items: promptsWithTag,
    path: 'prompts',
    emptyMessage: 'No prompts with this tag'
  }
];

// Total count of items with this tag
const totalCount = articlesWithTag.length + tutorialsWithTag.length +
                  booksWithTag.length + promptsWithTag.length;

// Function to format date
function formatDate(date) {
  return new Intl.DateTimeFormat('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  }).format(date);
}
---

<BaseLayout pageTitle={pageTitle}>
  <div class="max-w-4xl mx-auto">
    <div class="mb-8">
      <a href="/tags" class="inline-flex items-center text-sm font-medium text-gray-500 hover:text-gray-700">
        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
        </svg>
        Back to All Tags
      </a>
    </div>

    <div class="mb-8">
      <h1 class="text-3xl font-bold text-gray-900">
        <span class="px-3 py-1 bg-gray-100 rounded-lg">{tag}</span>
      </h1>
      <p class="mt-2 text-gray-600">{totalCount} {totalCount === 1 ? 'item' : 'items'} tagged with "{tag}"</p>
    </div>

    {totalCount === 0 ? (
      <div class="p-6 text-center bg-white rounded-lg shadow-sm">
        <p class="text-gray-500">No content found with this tag.</p>
        <a href="/tags" class="inline-block px-4 py-2 mt-4 text-sm font-medium text-white bg-blue-600 rounded-md hover:bg-blue-700">
          Browse All Tags
        </a>
      </div>
    ) : (
      <div class="space-y-8">
        {contentByType.map(contentType => (
          contentType.items.length > 0 && (
            <div class="p-6 bg-white rounded-lg shadow-sm">
              <h2 class="mb-4 text-xl font-semibold text-gray-900">{contentType.type}</h2>
              <div class="space-y-4">
                {contentType.items.map(item => (
                  <div class="article-item">
                    <a
                      href={"/" + item.slug}
                      class="flex flex-row items-center p-1 text-xl text-gray-900 border-0 rounded-lg hover:bg-gray-200"
                    >
                      {item.data.icon && (
                        <Image
                          src={item.data.icon}
                          width="50"
                          height="50"
                          alt={item.data.title}
                          class="self-start inline w-auto h-16 p-2 mr-4 align-middle"
                        />
                      )}
                      <div>
                        <p class="text-sm md:text-lg">{item.data.title}</p>
                        <p class="m-0 text-xs text-gray-600">{item.data.description}</p>
                        <p class="mt-1 text-xs text-gray-500">
                          {formatDate(item.data.dateUpdated || item.data.dateCreated)}
                        </p>
                      </div>
                    </a>
                  </div>
                ))}
              </div>
            </div>
          )
        ))}
      </div>
    )}

    <div class="mt-8 text-center">
      <a
        href="/tags"
        class="inline-block px-4 py-2 text-sm font-medium text-gray-700 bg-gray-100 rounded-full hover:bg-gray-200"
      >
        View All Tags
      </a>
    </div>
  </div>
</BaseLayout>

<style>
  /* Add any additional styles here */
</style>
